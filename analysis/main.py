'''
Analysis runner
'''

import os
import argparse
from unittest import result

parser = argparse.ArgumentParser(description="Strategy Analysis")


# python3 main.py --name TKSPY --date 20220402 --start 20191030 --end 20191030 --num 143804
parser.add_argument(
                    '--name',
                    type=str,
                    required=True,
                    help="Name of the Strategy")

parser.add_argument(
                    '--date',
                    type=str,
                    required=True,
                    help="Date of the target backtesting result")

parser.add_argument(
                    '--start',
                    type=str,
                    required=True,
                    help="Begin time of the strategy")
parser.add_argument(
                    '--end',
                    type=str,
                    required=True,
                    help="End time of the strategy")
parser.add_argument(
                    '--num',
                    type=int,
                    required=True,
                    help="Instance number generated by Stratgegy Studio")

def get_args():
    '''
    Get arguments parsed
    '''
    args = parser.parse_args()
    return args.name, args.date, args.start, args.end, args.num

def parse_date(date_string, reverse=False):
    """
    Convert YYYYMMDD to YYYY-MM-DD

    Parameters
    ----------
        types : str
            date in YYYYMMDD string format
    """
    if len(date_string) != 8:
        raise Exception("Invalid date")

    if reverse:
        return f"{date_string[4:6]}-{date_string[6:]}-{date_string[0:4]}"
    return f"{date_string[0:4]}-{date_string[4:6]}-{date_string[6:]}"

if __name__ == "__main__":
    strategy_name, strategy_date, start_time, end_time, num = get_args()
    start_time_list = parse_date(start_time).split("-")
    end_time_list = parse_date(end_time).split("-")
    for i in range(3):
        if int(start_time_list[i]) > int(end_time_list[i]):
            raise Exception("Invalid start and end time")

        if int(start_time_list[i]) < int(end_time_list[i]):
            break

    FILE_PREFIX = (
        f"BACK_{strategy_name}_" +
        f"{parse_date(strategy_date)}_" +
        f"{num}_start_{parse_date(start_time, True)}_" +
        f"end_{parse_date(end_time, True)}_")

    result_files = []
    for result_type in ["fill", "order", "pnl"]:
        if not os.path.exists("sample_data/" + FILE_PREFIX + result_type + ".csv"):
            raise Exception("Invalid arguments!")
        result_files.append(
            FILE_PREFIX + result_type + ".csv"
        )
    print(result_files)
